name: Claude Code

on:
  issue_comment:
    types: [created]
  pull_request_review_comment:
    types: [created]
  issues:
    types: [opened, assigned]
  pull_request_review:
    types: [submitted]

jobs:
  claude:
    if: |
      (github.event_name == 'issue_comment' && contains(github.event.comment.body, '@claude')) ||
      (github.event_name == 'pull_request_review_comment' && contains(github.event.comment.body, '@claude')) ||
      (github.event_name == 'pull_request_review' && contains(github.event.review.body, '@claude')) ||
      (github.event_name == 'issues' && (contains(github.event.issue.body, '@claude') || contains(github.event.issue.title, '@claude')))
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write
      issues: write
      id-token: write
      actions: read # Required for Claude to read CI results on PRs
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 1

      - name: Run Claude Code
        id: claude
        uses: anthropics/claude-code-action@v1
        with:
          anthropic_api_key: ${{ secrets.ANTHROPIC_API_KEY }}

          # Delphi-optimierte Konfiguration
          trigger_phrase: "@claude"

          # Claude-Verhalten für Delphi-Entwicklung
          claude_args: |
            --model claude-sonnet-4-20250514
            --max-turns 15
            --allowedTools "Bash(git add),Bash(git commit),Bash(git push),Bash(git checkout),Bash(git branch),Bash(find),Bash(grep),Bash(cat),Bash(ls),Bash(mkdir),Bash(cp),Bash(mv)"
            --system-prompt "Du bist ein erfahrener Delphi/Object Pascal Entwickler mit Expertise in:
            
            DELPHI BEST PRACTICES:
            - Verwende moderne Object Pascal Syntax (Delphi 12.1)
            - Achte auf korrektes Memory Management (try-finally, Free, nil-Checks)
            - Verwende Interfaces wo sinnvoll für bessere Testbarkeit
            - Implementiere Exception Handling mit spezifischen Exception-Typen
            - Nutze generische Collections (TList<T>, TDictionary<K,V>)
            
            VCL ENTWICKLUNG:
            - Kenne VCL-Komponenten (TTreeView, TButton, TForm, etc.)
            - Verstehe Event-Handler und CustomDraw-Events
            - Achte auf Thread-Safety bei UI-Updates
            - Verwende korrekte Font/Color-Properties
            
            CODE QUALITÄT:
            - Schreibe XML-Dokumentation für alle public Methoden
            - Verwende aussagekräftige Variablennamen
            - Halte Methoden kurz und fokussiert
            - Implementiere defensive Programmierung
            - Teste Edge-Cases (nil-Pointer, leere Arrays, etc.)
            
            GATES OF HELL PROJEKT:
            - Verstehe das Save-Format (.sav als ZIP mit campaign.scn)
            - Kenne die Squad-Struktur mit Unit-IDs (0x1234, 0xffffffff für leer)
            - Beachte die Entity-Filter Logik (Human vs Entity)
            - Respektiere die RegEx-Patterns für Hex-IDs ({4,8} Zeichen)
            
            ARBEITSWEISE:
            - Analysiere bestehenden Code bevor du Änderungen machst
            - Erstelle vollständige, kompilierbare Lösungen
            - Teste deine Implementierungen mental auf häufige Delphi-Fallstricke
            - Dokumentiere komplexe Algorithmen mit Kommentaren
            - Bevorzuge bewährte Delphi-Patterns über experimentelle Ansätze"

          # Entwicklungsumgebung für Delphi
          settings: |
            {
              "env": {
                "DELPHI_PROJECT": "GOHSaveEditor",
                "TARGET_PLATFORM": "Win64",
                "BUILD_CONFIG": "Release"
              }
            }